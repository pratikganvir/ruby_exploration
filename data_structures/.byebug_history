exit
stack.pop
stack
opening_paranthesis[popped_index]
char
popped_index = closing_paranthesis.index(char)
exit
popped_index = closing_paranthesis.index(char)
stack.pop
popped_index
exit
expression1
char
closing_paranthesis.include?(char)
c
char
c
char
c
char
exit
btree.left_child.data
btree.left_child
btree
exit
@right_child
@left_child
@data
exit
@data
exit
@left_child
@data
c
@left_child
@data
exit
puts i
reverse_pos(arr,d,n,i)
reverse_pos(arr,d,n,3)
reverse_pos(arr,d,n,4)
((n/d)-1)
reverse_pos(arr,d,n,2)
reverse_pos(arr,d,n,1)
reverse_pos(arr,d,n,i)
arr
exit
c
reverse_pos(arr,d,n,i)
c
reverse_pos(arr,d,n,i)
arr
exit
reverse_pos(arr,d,n,i)
arr
exit
reverse_pos(arr,d,n,i)
arr
exit
reverse_pos(arr,d,n,i)
arr
exit
puts n
(d*2)
(d*1)
d*i
puts i
d*i
(0..(d-1))
reverse_pos(arr,d,n,i)
puts i
puts n
n
d
arr
exit
arr
c
arr
exit
n - (d*(2+1))
n - (d*(1+1))
n - (d*(0+1))
n - (d*(j+1))
n - (d*(i+1))
n - (d*(i+1)) + 1
n-d
d
(d*i)
puts n
n
n - (d*i) + 1 + j
arr[n - (d*i) + 1 + j]
j
arr[0+j]
arr
exit
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
c
arr
exit
arr[arr.length - (d*i)- j-1]
arr[0+j]
arr
c
arr
exit
arr[arr.length - (d*i)- j-1]
arr[9]
arr[10]
arr.length - (d*i)- j
arr.length
j
d*i
arr[arr.length - (d*i)- j]
temp = arr[0+j]
arr
0+j
temp = arr[0+j]
0+j
exit
arr
c
arr
